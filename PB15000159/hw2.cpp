#include <opencv2/opencv.hpp>
#include <cv.h>

using namespace std;
using namespace cv;

#define MY_OK 1
#define MY_FAIL 0
//功能说明：找到图像中所有圆心在图像内的圆，得到中心点和半径
//colorImg：用来搜索圆形目标的彩色图像
//min_radius：需要搜索的圆的最小半径
//max_radius：需要搜索的圆的最大半径
//min_center_dist：找到的圆心之间的最小距离
//min_radius_dist：同心圆半径之间的最小差距
//max_circle_diff：阈值，圆周差分值低于此阈值，不是圆
//x：数组，存储所有的圆的中心点x坐标
//y：数组，存储所有的圆的中心点y坐标
//radius：数组，存储所有的圆的半径值
//circle_cnt：图像中找到的圆的数目
//max_circle：外部传入参数，圆的数目上限。如果图像中圆的数目超过此参数，根据差分值由大到小进行排序
//返回值：MY_OK或者MY_FAIL


int ustc_Find_Circles_By_Difference(
	Mat colorImg,
	int min_radius,
	int max_radius,
	int min_center_dist,
	int min_radius_dist,
	int max_circle_diff,
	int* x,
	int* y,
	int* radius,
	int* circle_cnt,
	int max_circle)
{
	Mat gray;
	Mat three[3];
	int test = 0;
	int col = colorImg.cols - min_radius, row = colorImg.rows - min_radius;
	int i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, rgb;
	int temp[3];
	int num;
	int diff[1000];
	int invar[3], outvar[3];
	int judge = max_circle_diff*max_circle_diff;
	int dist = min_center_dist*min_center_dist;
	bool flag;
	float mysin[360] = { 0,0.0174524,0.0348995,0.052336,0.0697565,0.0871557,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.34202,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.45399,0.469472,0.48481,0.5,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.62932,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.71934,0.731354,0.743145,0.75471,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.87462,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.93358,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.97437,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,0.999848,1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.97437,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.62932,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.5,0.48481,0.469472,0.45399,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.0871557,0.0697565,0.052336,0.0348995,0.0174524,-1.02068e-11,-0.0174524,-0.0348995,-0.052336,-0.0697565,-0.0871557,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.34202,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469472,-0.48481,-0.5,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.62932,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.71934,-0.731354,-0.743145,-0.75471,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.87462,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.93358,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,-0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.87462,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.62932,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.5,-0.48481,-0.469472,-0.45399,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.34202,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.0871557,-0.0697565,-0.052336,-0.0348995,-0.0174524 };
	float mycos[360] = { 1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.97437,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.62932,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.5,0.48481,0.469472,0.45399,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.0871557,0.0697565,0.052336,0.0348995,0.0174524,-5.10341e-12,-0.0174524,-0.0348995,-0.052336,-0.0697565,-0.0871557,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.34202,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469472,-0.48481,-0.5,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.62932,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.71934,-0.731354,-0.743145,-0.75471,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.87462,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.93358,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,-0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.87462,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.62932,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.5,-0.48481,-0.469472,-0.45399,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.34202,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.0871557,-0.0697565,-0.052336,-0.0348995,-0.0174524,1.53102e-11,0.0174524,0.0348995,0.052336,0.0697565,0.0871557,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.34202,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.45399,0.469472,0.48481,0.5,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.62932,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.71934,0.731354,0.743145,0.75471,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.87462,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.93358,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.97437,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,0.999848 };
//	cvtColor(colorImg, gray, CV_BGR2GRAY);
	split(colorImg, three);
	for (i = min_radius;i < row;i++)
	{
		//cout << i << endl;
		for (j = min_radius;j < col;j++)
		{
			flag = false;
			for (l = 0;l < *circle_cnt;l++)
			{
				m = i - x[l];
				m = m*m;
				n = j - y[l];
				n = n*n;
				if (m + n <= dist)
				{
					flag = true;
					break;
				}
			}
			if (flag) continue;
			for (k = min_radius;k <= max_radius;)
			{
				if (k > i || k > j || k > (row + min_radius - i) || k > (col + min_radius - j))
				{
					break;
				}
				temp[0] = 0;
				temp[1] = 0;
				temp[2] = 0;
				for (l = 0;l < 360;l += 1)
				{
					m = i + mycos[l] * (k - 3);
					n = j + mysin[l] * (k - 3);
					temp[0] += three[0].at<uchar>(m, n);
					temp[1] += three[1].at<uchar>(m, n);
					temp[2] += three[2].at<uchar>(m, n);
				}
				invar[0] = temp[0] / 360;
				invar[1] = temp[1] / 360;
				invar[2] = temp[2] / 360;
				temp[0] = 0;
				temp[1] = 0;
				temp[2] = 0;
				num = 0;
				for (l = 0;l < 360;l += 1)
				{
					m = i + mycos[l] * (k + 3);
					n = j + mysin[l] * (k + 3);
					if (m < 0 || m >= row + min_radius || n < 0 || n >= col + min_radius)
					{
						continue;
					}
					temp[0] += three[0].at<uchar>(m, n);
					temp[1] += three[1].at<uchar>(m, n);
					temp[2] += three[2].at<uchar>(m, n);
					num++;
				}
				outvar[0] = temp[0] / num;
				outvar[1] = temp[1] / num;
				outvar[2] = temp[2] / num;
				temp[0] = invar[0] - outvar[0];
				temp[1] = invar[1] - outvar[1];
				temp[2] = invar[2] - outvar[2];
				temp[0] = temp[0] * temp[0];
				temp[1] = temp[1] * temp[1];
				temp[2] = temp[2] * temp[2];
				rgb = temp[0] > temp[1] ? temp[0] > temp[2] ? temp[0] : temp[2] : temp[1] > temp[2] ? temp[1] : temp[2];
				if (rgb >= judge)
				{
					test++;
					if (test > *circle_cnt * 5)
					{
						return MY_FAIL;
					}
					if (*circle_cnt<max_circle)
					{
						//						cout << i << "  " << j << "  " << k << endl;
						//						system("pause");
						x[*circle_cnt] = i;
						y[*circle_cnt] = j;
						radius[*circle_cnt] = k;
						diff[*circle_cnt] = rgb;
						(*circle_cnt)++;
						k += min_radius_dist;
					}
					else
					{
						m = diff[0];
						n = 0;
						for (l = 1;l < max_circle;l++)
						{
							if (diff[l] < m)
							{
								m = diff[l];
								n = l;
							}
						}
						if (rgb >= m)
						{
							x[n] = i;
							y[n] = j;
							radius[n] = k;
							diff[n] = rgb;
							k += min_radius_dist;
						}
						else k += 1;
					}
				}
				else k++;
			}
		}
	}
	return MY_OK;
}
